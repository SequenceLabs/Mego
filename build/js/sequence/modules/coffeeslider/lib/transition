(function() {
  "use strict";
  var effects, getProp, transitionEndNames,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  effects = SEQ.utils.namespace("effects");

  transitionEndNames = {
    WebkitTransition: 'webkitTransitionEnd',
    MozTransition: 'transitionend',
    OTransition: 'oTransitionEnd',
    msTransition: 'msTransitionEnd',
    transition: 'transitionEnd'
  };

  getProp = function(prop) {
    var p, prefix, _i, _len, _ref;
    _ref = ["", "Webkit", "Moz", "O", "ms", "Khtml"];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      prefix = _ref[_i];
      p = "" + prefix + prop;
      if (document.body.style[p] != null) return p;
    }
  };

  effects.Transition = (function() {

    function Transition() {}

    Transition.To = function(options) {
      var t;
      return t = setTimeout(function() {
        if (getProp("Transition") != null) {
          new effects.CSSTransition(options);
        } else {
          Transition.jqAnimate(options);
        }
        return clearTimeout(t);
      }, options.delay || 0);
    };

    Transition.jqAnimate = function(options) {
      var target;
      if (options.target instanceof jQuery) {
        target = options.target;
      } else {
        target = $(options.target);
      }
      return target.animate(options.props, {
        duration: options.duration,
        complete: function(e) {
          if (options.complete != null) return options.complete.call(Transition);
        }
      });
    };

    return Transition;

  }).call(this);

  effects.CSSTransition = (function() {

    function CSSTransition(options) {
      var element, elements, i, _len, _ref;
      this.options = options;
      this.onTransitionEnd = __bind(this.onTransitionEnd, this);
      this.transition = __bind(this.transition, this);
      this.transitionEndStr = transitionEndNames[getProp('Transition')];
      this.numTransitions = 0;
      this.numTransitionsComplete = 0;
      elements = [];
      if (this.options.target instanceof jQuery) {
        _ref = this.options.target;
        for (i = 0, _len = _ref.length; i < _len; i++) {
          element = _ref[i];
          elements.push(this.options.target.get(i));
        }
      } else if (this.options.target.constructor === Array) {
        elements = this.options.target;
      } else {
        elements = [this.options.target];
      }
      this.transition(elements);
    }

    CSSTransition.prototype.transition = function(elements) {
      var element, prop, value, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = elements.length; _i < _len; _i++) {
        element = elements[_i];
        _results.push((function() {
          var _ref, _results2;
          _ref = this.options.props;
          _results2 = [];
          for (prop in _ref) {
            value = _ref[prop];
            this.numTransitions++;
            if (this.options.duration > 0) {
              element.addEventListener(this.transitionEndStr, this.onTransitionEnd, false);
            } else {
              this.onTransitionEnd({
                target: element
              });
            }
            _results2.push(new effects.TransitionDelegate(element, prop, value, this.options.duration));
          }
          return _results2;
        }).call(this));
      }
      return _results;
    };

    CSSTransition.prototype.onTransitionEnd = function(e) {
      e.target.removeEventListener(this.transitionEndStr, this.onTransitionEnd, false);
      this.numTransitionsComplete++;
      if (this.numTransitionsComplete === this.numTransitions) {
        if (this.options.complete != null) return this.options.complete.call(this);
      }
    };

    return CSSTransition;

  })();

  effects.TransitionDelegate = (function() {

    function TransitionDelegate(element, property, value, duration) {
      this.element = element;
      this.property = property;
      this.value = value;
      this.duration = duration;
      this.removeTransitionStyles = __bind(this.removeTransitionStyles, this);
      this.addTransitionStyles = __bind(this.addTransitionStyles, this);
      this.onTransitionEnd = __bind(this.onTransitionEnd, this);
      this.getClientAutoSize = __bind(this.getClientAutoSize, this);
      this.addStyles = __bind(this.addStyles, this);
      if (this.duration > 0) {
        this.element.addEventListener(transitionEndNames[getProp('Transition')], this.onTransitionEnd, false);
      }
      this.addTransitionStyles();
      this.addStyles();
      if (this.duration === 0) this.onTransitionEnd();
    }

    TransitionDelegate.prototype.addStyles = function() {
      var size,
        _this = this;
      if ((this.property === "height" || "width") && this.value === "auto") {
        size = this.getClientAutoSize(this.element);
        return this.element.style[this.property] = "" + (this.property === "height" ? size.height : size.width) + "px";
      } else if ((this.property === "height" || "width") && this.element.style[this.property] === "auto") {
        this.removeTransitionStyles();
        this.element.style[this.property] = "" + (this.property === "height" ? this.element.clientHeight : this.element.clientWidth) + "px";
        return setTimeout(function() {
          _this.addTransitionStyles();
          return _this.element.style[_this.property] = "" + _this.value + "px";
        }, 50);
      } else {
        return this.element.style[this.property] = "" + (this.value + this.pxMap(this.property));
      }
    };

    TransitionDelegate.prototype.getClientAutoSize = function(element) {
      var body, clone, size;
      clone = element.cloneNode(true);
      body = document.querySelector("body");
      body.appendChild(clone);
      clone.style.width = "auto";
      clone.style.height = "auto";
      clone.style.visibility = "hidden";
      clone.style.display = "block";
      size = {
        width: clone.clientWidth,
        height: clone.clientHeight
      };
      body.removeChild(clone);
      return size;
    };

    TransitionDelegate.prototype.onTransitionEnd = function(e) {
      if (e != null) {
        e.target.removeEventListener(e.type, this.onTransitionEnd, false);
      }
      this.removeTransitionStyles();
      if (this.value === "auto") {
        if (this.property === "height" || "width") {
          return this.element.style[this.property] = "auto";
        }
      }
    };

    TransitionDelegate.prototype.addTransitionStyles = function() {
      this.element.style["" + (getProp('TransitionProperty'))] = "all";
      this.element.style["" + (getProp('TransitionDuration'))] = "" + (this.duration / 1000) + "s";
      return this.element.style["" + (getProp('TransitionTimingFunction'))] = "ease-in-out";
    };

    TransitionDelegate.prototype.removeTransitionStyles = function() {
      this.element.style["" + (getProp('TransitionProperty'))] = "";
      this.element.style["" + (getProp('TransitionDuration'))] = "";
      return this.element.style["" + (getProp('TransitionTimingFunction'))] = "";
    };

    TransitionDelegate.prototype.pxMap = function(obj) {
      var prop, suffix, _i, _len, _ref;
      suffix = "";
      _ref = ["left", "right", "top", "bottom", "width", "height"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        prop = _ref[_i];
        if (obj === prop) suffix = "px";
      }
      return suffix;
    };

    return TransitionDelegate;

  })();

}).call(this);
