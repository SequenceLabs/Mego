@mixin block{
  clear:both;
  margin:$baseline 0;
  overflow:hidden;
}
// Legacy support for inline-block in IE7
@mixin inline-block {
  display: -moz-inline-box;
  -moz-box-orient: vertical;
  display: inline-block;
  vertical-align: baseline;
  zoom: 1;
  *display: inline;
  *vertical-align: auto;
}
@mixin font-face($name, $filename, $src: fonts, $font-weight: normal, $font-style: normal) {
  @font-face {
    font-family: $name;
    src: url('#{$src/$filename}.eot');
    src: url('#{$src/$filename}.eot?iefix') format("eot"), url('#{$src/$filename}.woff') format("woff"), url('#{$src/$filename}.ttf') format("truetype"), url('#{$src/$filename}.svg#webfontZam02nTh') format("svg");
    font-weight: $font-weight;
    font-style: $font-style; 
    } 
}

// Sets link colours
// Inspired by Compass
@mixin link-colours($normal, $hover: false, $active: false, $visited: false, $focus: false) {
  color: $normal;
  @if $visited {
    &:visited {
      color: $visited;
    }
  }
  @if $focus {
    &:focus {
      color: $focus;
    }
  }
  @if $hover {
    &:hover {
      color: $hover;
    }
  }
  @if $active {
    &:active {
      color: $active;
    }
  }
}

@mixin clearfix {
  /* For modern browsers */
  &:before,
  &:after {
    content:"";
    display:table;
  }
  &:after {
    clear:both;
  }
  zoom:1; /* IE6/IE7 */
}

// Converts pixels to em
@mixin px-to-em($px, $base: 16){
  font-size: #{$px/$base}em;/*16 x !ems = !pixels*/
}
// Converts pixels to rem
@mixin px-to-rem($px, $base: 16){
  font-size: #{$px/$base}rem;
}

@mixin font-size($sizeValue: 1.6, $lineHeight: "auto"){
  font-size: ($sizeValue * 10) + px;
  font-size: $sizeValue + rem;

  @if $lineHeight == "auto" {
    line-height: (ceil($sizeValue) * 10) + px;
    line-height: ceil($sizeValue) + rem;
  } 
  @else {
    line-height: ($lineHeight * 10) + px;
    line-height: $lineHeight + rem;
  }
}

@mixin unlinkify() {
  color: $text-color;
  &:hover {
    text-decoration: none;
  }
}

@mixin mobile-cta() {
  width: 100%;
  display: block;
  float: none;
  clear: both;
  border-bottom: 1px solid $borders;
  margin-bottom: 10px;
  @include clearfix();
  figure {
    width: 100px;
    float: left;
    margin: 0 20px 10px 0;
  }
  h3 {
    margin-left: 10px;
    display: block;
  }
  p {
    margin-bottom: 0;
  }
  .button {
    display: none;
  }
}

// Mixins
// Snippets of reusable CSS to develop faster and keep code readable
// -----------------------------------------------------------------


// UTILITY MIXINS
// --------------------------------------------------

// Clearfix
// --------
// For clearing floats like a boss h5bp.com/q

.clearfix {
  @include clearfix();
}

// Grid System
// -----------

// Centered container element
@mixin container-fixed() {
  margin-right: auto;
  margin-left: auto;
  @include clearfix();
}

// Table columns
@mixin tableColumns($columnSpan: 1) {
  float: none; // undo default grid column styles
  width: (($gridColumnWidth) * $columnSpan) + ($gridGutterWidth * ($columnSpan - 1)) - 16; // 16 is total padding on left and right of table cells
  margin-left: 0; // undo default grid column styles
}

// Make a Grid
// Use .makeRow and .makeColumn to assign semantic layouts grid system behavior
@mixin makeRow() {
  margin-left: $gridGutterWidth * -1;
  @include clearfix();
}
@mixin makeColumn($columns: 1, $offset: 0) {
  float: left;
  margin-left: ($gridColumnWidth * $offset) + ($gridGutterWidth * ($offset - 1)) + ($gridGutterWidth * 2);
  width: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns - 1));
}

// The Grid
@mixin core-offset($columns, $gridColumnWidth, $gridGutterWidth) {
  margin-left: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns + 1));
}

@mixin core-span($columns, $gridColumnWidth, $gridGutterWidth) {
  width: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns - 1));
}

@mixin grid-core($gridColumnWidth, $gridGutterWidth) {
  .row {
    margin-left: $gridGutterWidth * -1;
    @include clearfix();
  }

  [class*="span"] {
    float: left;
    margin-left: $gridGutterWidth;
  }

  // Set the container width, and override it for fixed navbars in media queries
  .container,
  .navbar-fixed-top .container,
  .navbar-fixed-bottom .container {
    @include core-span($gridColumns, $gridColumnWidth, $gridGutterWidth);
  }

  // generate .spanX and .offsetX
  $i: $gridColumns;
  @while $i > 0 {
    .span#{$i} { @include core-span($i, $gridColumnWidth, $gridGutterWidth); }
    $i: $i - 1;
  }

  $i: $gridColumns;
  @while $i > 0 {
    .offset#{$i} { @include core-offset($i, $gridColumnWidth, $gridGutterWidth); }
    $i: $i - 1;
  }
}

@mixin fluid-span($columns, $fluidGridColumnWidth, $fluidGridGutterWidth) {
  width: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1));
  *width: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1)) - (.5 / $gridRowWidth * 100px * 1%);
}

@mixin grid-fluid($fluidGridColumnWidth, $fluidGridGutterWidth) {
  .row-fluid {
    width: 100%;
    @include clearfix();
    [class*="span"] {
      // @include input-block-level();
      float: left;
      margin-left: $fluidGridGutterWidth;
      *margin-left: $fluidGridGutterWidth - (.5 / $gridRowWidth * 100px * 1%);
    }
    [class*="span"]:first-child {
      margin-left: 0;
    }

    // generate .spanX
    $i: $gridColumns;
    @while $i > 0 {
      .span#{$i} {
        @include fluid-span($i, $fluidGridColumnWidth, $fluidGridGutterWidth);
      }
      $i: $i - 1;
    }
  }
}

@mixin input-span($columns, $gridColumnWidth, $gridGutterWidth) {
  width: (($gridColumnWidth) * $columns) + ($gridGutterWidth * ($columns - 1)) - 10;
}

@mixin grid-input($gridColumnWidth, $gridGutterWidth) {
  input,
  textarea,
  .uneditable-input {
    margin-left: 0; // override margin-left from core grid system
  }

  // generate .spanX
  $i: $gridColumns;
  @while $i > 0 {
    input.span#{$i},
    textarea.span#{$i},
    .uneditable-input.span#{$i} {
      @include input-span($i, $gridColumnWidth, $gridGutterWidth);
    }
    $i: $i - 1;
  }
}